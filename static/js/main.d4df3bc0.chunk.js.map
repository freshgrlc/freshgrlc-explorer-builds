{"version":3,"sources":["components/App/App.component.tsx","serviceWorker.ts","index.tsx"],"names":["Waiting","Component","props","fallback","RouteParams","match","location","routeParams","params","queryParams","queryString","parse","search","wrapModule","module","default","Home","React","lazy","then","TransactionView","BlocksListView","BlockView","AddressView","RichListView","PoolDistributionView","DifficultyGraphView","App","exact","path","component","to","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQAIMA,EAAU,SAACC,GACb,OAAO,SAACC,GAAD,OACH,kBAAC,WAAD,CAAUC,SAAU,4CAChB,kBAACF,EAAcC,MAKrBE,EAAc,SAACH,GACjB,OAAO,gBAAGI,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OAA8B,kBAACL,EAAD,CAAWM,YAAaF,EAAMG,OAAQC,YAAaC,IAAYC,MAAML,EAASM,YAGjHC,EAAa,SAACC,GAAD,MAAkB,CAAEC,QAASD,IAE1CE,EAAOC,IAAMC,MAAK,kBAAM,4DAAyCC,MAAK,SAACL,GAAD,OAAYD,EAAWC,EAAOE,YAEpGI,EAAkBH,IAAMC,MAAK,kBAC/B,oDAA+DC,MAAK,SAACL,GAAD,OAAYD,EAAWC,EAAOM,uBAEhGC,EAAiBJ,IAAMC,MAAK,kBAC9B,oDAA6DC,MAAK,SAACL,GAAD,OAAYD,EAAWC,EAAOO,sBAE9FC,EAAYL,IAAMC,MAAK,kBACzB,oDAAmDC,MAAK,SAACL,GAAD,OAAYD,EAAWC,EAAOQ,iBAEpFC,EAAcN,IAAMC,MAAK,kBAC3B,oDAAuDC,MAAK,SAACL,GAAD,OAAYD,EAAWC,EAAOS,mBAExFC,EAAeP,IAAMC,MAAK,kBAC5B,qDAAyDC,MAAK,SAACL,GAAD,OAAYD,EAAWC,EAAOU,oBAE1FC,EAAuBR,IAAMC,MAAK,kBACpC,4DAAyEC,MAAK,SAACL,GAAD,OAAYD,EAAWC,EAAOW,4BAE1GC,EAAsBT,IAAMC,MAAK,kBACnC,4DAAuEC,MAAK,SAACL,GAAD,OAAYD,EAAWC,EAAOY,2BAGjGC,EAAgB,WACzB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,EAAQgB,KACzC,kBAAC,IAAD,CACIa,KAAK,+BACLC,UAAW1B,EAAYJ,EAAQgB,MAEnC,kBAAC,IAAD,CACIa,KAAK,wDACLC,UAAW1B,EAAYJ,EAAQgB,MAEnC,kBAAC,IAAD,CACIY,OAAK,EACLC,KAAK,gCACLC,UAAW1B,EAAYJ,EAAQqB,MAEnC,kBAAC,IAAD,CACIQ,KAAK,kDACLC,UAAW1B,EAAYJ,EAAQsB,MAEnC,kBAAC,IAAD,CACIO,KAAK,wDACLC,UAAW1B,EAAYJ,EAAQoB,MAEnC,kBAAC,IAAD,CACIS,KAAK,gDACLC,UAAW1B,EAAYJ,EAAQuB,MAEnC,kBAAC,IAAD,CACIM,KAAK,kCACLC,UAAW1B,EAAYJ,EAAQwB,MAEnC,kBAAC,IAAD,CACIK,KAAK,0CACLC,UAAW1B,EAAYJ,EAAQyB,MAEnC,kBAAC,IAAD,CACII,KAAK,0CACLC,UAAW1B,EAAYJ,EAAQ0B,MAEnC,kBAAC,IAAD,CACII,UAAW,kBACP,6BACI,yCACA,kBAAC,IAAD,CAAMC,GAAG,KAAT,yBC5ERC,QACa,cAA7BC,OAAO3B,SAAS4B,UAEiB,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAAS7B,MAAM,2DCRvC8B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsHzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMtB,MAAK,SAACuB,GAChCA,EAAaC,kB","file":"static/js/main.d4df3bc0.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport queryString from 'query-string';\n\nconst Waiting = (Component: any) => {\n    return (props: any) => (\n        <Suspense fallback={<div>Loading...</div>}>\n            <Component {...props} />\n        </Suspense>\n    );\n};\n\nconst RouteParams = (Component: React.FC<any>) => {\n    return ({ match, location }: any) => <Component routeParams={match.params} queryParams={queryString.parse(location.search)} />;\n};\n\nconst wrapModule = (module: any) => ({ default: module });\n\nconst Home = React.lazy(() => import('components/Home/Home.component').then((module) => wrapModule(module.Home)));\n\nconst TransactionView = React.lazy(() =>\n    import('components/TransactionView/TransactionView.component').then((module) => wrapModule(module.TransactionView))\n);\nconst BlocksListView = React.lazy(() =>\n    import('components/BlocksListView/BlocksListView.component').then((module) => wrapModule(module.BlocksListView))\n);\nconst BlockView = React.lazy(() =>\n    import('components/BlockView/BlockView.component').then((module) => wrapModule(module.BlockView))\n);\nconst AddressView = React.lazy(() =>\n    import('components/AddressView/AddressView.component').then((module) => wrapModule(module.AddressView))\n);\nconst RichListView = React.lazy(() =>\n    import('components/RichListView/RichListView.component').then((module) => wrapModule(module.RichListView))\n);\nconst PoolDistributionView = React.lazy(() =>\n    import('components/PoolDistributionView/PoolDistributionView.component').then((module) => wrapModule(module.PoolDistributionView))\n);\nconst DifficultyGraphView = React.lazy(() =>\n    import('components/DifficultyGraphView/DifficultyGraphView.component').then((module) => wrapModule(module.DifficultyGraphView))\n);\n\nexport const App: React.FC = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\" component={Waiting(Home)} />\n                <Route\n                    path=\"/:coin1(grlc|tux|tgrlc)/home\"\n                    component={RouteParams(Waiting(Home))}\n                />\n                <Route\n                    path=\"/:coin1(grlc|tux|tgrlc)\\+:coin2(grlc|tux|tgrlc)/home\"\n                    component={RouteParams(Waiting(Home))}\n                />\n                <Route\n                    exact\n                    path=\"/:coin(grlc|tux|tgrlc)/blocks\"\n                    component={RouteParams(Waiting(BlocksListView))}\n                />\n                <Route\n                    path=\"/:coin(grlc|tux|tgrlc)/blocks/:hash(\\w{64,64})\"\n                    component={RouteParams(Waiting(BlockView))}\n                />\n                <Route\n                    path=\"/:coin(grlc|tux|tgrlc)/transactions/:txid(\\w{64,64})\"\n                    component={RouteParams(Waiting(TransactionView))}\n                />\n                <Route\n                    path=\"/:coin(grlc|tux|tgrlc)/address/:address(\\w+)\"\n                    component={RouteParams(Waiting(AddressView))}\n                />\n                <Route\n                    path=\"/:coin(grlc|tux|tgrlc)/richlist\"\n                    component={RouteParams(Waiting(RichListView))}\n                />\n                <Route\n                    path=\"/:coin(grlc|tux|tgrlc)/pooldistribution\"\n                    component={RouteParams(Waiting(PoolDistributionView))}\n                />\n                <Route\n                    path=\"/:coin(grlc|tux|tgrlc)/difficultygraphs\"\n                    component={RouteParams(Waiting(DifficultyGraphView))}\n                />\n                <Route\n                    component={() => (\n                        <div>\n                            <h1>Error 404</h1>\n                            <Link to=\"/\">Back to Safety</Link>\n                        </div>\n                    )}\n                />\n            </Switch>\n        </Router>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\n\nimport { App } from 'components/App/App.component';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}