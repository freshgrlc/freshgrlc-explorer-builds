{"version":3,"sources":["components/TransactionView/TransactionMetaInfo/TransactionMetaInfo.module.scss","components/TransactionView/TransactionCoinMovement/TransactionOutputs/TransactionOutputs.module.scss","components/TransactionView/TransactionCoinMovement/TransactionInputs/TransactionInputs.module.scss","components/TransactionView/TransactionCoinMovement/TransactionCoinMovement.module.scss","components/TransactionView/TransactionView.module.scss","components/TransactionView/TransactionMetaInfo/TransactionMetaInfo.component.tsx","components/TransactionView/TransactionCoinMovement/TransactionOutputs/TransactionOutputs.component.tsx","components/TransactionView/TransactionCoinMovement/TransactionInputs/TransactionInputs.component.tsx","components/TransactionView/TransactionCoinMovement/TransactionCoinMovement.component.tsx","components/TransactionView/TransactionView.component.tsx","context/CoinInfo.context.ts","utils/getBaseUrl.util.ts","utils/getCoinInfo.util.ts","components/Section/Section.component.tsx","components/Section/Section.module.scss","components/Cell/Cell.component.tsx","components/Banner/FreshGRLCBanner/FreshGRLCBanner.module.scss","components/Banner/CoinSelector/CoinSelector.module.scss","components/Banner/SearchBar/SearchBar.module.scss","components/Banner/FreshGRLCBanner/FreshGRLCBanner.component.tsx","components/Banner/CoinSelector/CoinSelector.component.tsx","components/Banner/SearchBar/SearchBar.component.tsx","components/Banner/Banner.component.tsx","utils/formatNumericalValue.util.tsx","components/PageLoadAnimation/PageLoadAnimation.component.tsx","components/PageLoadAnimation/PageLoadAnimation.module.scss","assets/loading_large.svg","utils/padNumber.util.ts","utils/formatTime.util.ts","assets/loading.gif","components/Cell/Cell.module.scss","components/Row/Row.component.tsx","components/Row/Row.module.scss"],"names":["module","exports","TransactionMetaInfo","transaction","coinInfo","useContext","CoinInfoContext","table","label","cells","data","formatTime","firstseen","notMono","block","timestamp","formatTimeDiffToString","hash","link","ticker","undefined","cellStyle","linkColor","totalvalue","unit","displaySymbol","alwaysSingular","size","fee","coinbase","decimals","map","row","forEach","cell","align","className","classes","transactionMetaInfo","header","txid","entry","index","key","wide","labelWidth","TransactionOutputs","outputs","convertDestination","output","address","script","splitted","split","length","getDestinationHeader","isDataOutput","transactionOutputs","transactionOutput","arrow","destination","type","destinationOverflow","rawOutput","to","getDestinationRawType","getDestinationRaw","amount","value","formatNumericalValue","decimalClass","unitClass","spentby","spent","unspent","getInputSubtext","inputType","TransactionInputs","inputs","coinbaseAmount","transactionInputs","input","transactionInput","source","signatureType","inputsAmount","textAddress","coinbasedata","segment","datasegment","coinbaseInput","TransactionCoinMovement","simplifiedInputs","coinMovement","Object","values","simplifyInputs","simplifiedDict","spends","TransactionView","routeParams","baseUrl","getBaseUrl","coin","getCoinInfo","useFetch","isLoading","error","inputsLoading","txInputs","outputsLoading","txOutputs","console","log","push","Provider","coins","getAllCoins","preferredCoin","transactionView","createContext","Coins","name","displayName","blockTime","blockReward","logo","filter","Section","children","pagesection","sectionheader","Cell","largelabel","externalLink","maxDecimals","wrapInLink","contents","accentuatedLink","href","target","rel","style","processInnerCellStyle","processCellStyle","innerCell","sunken","sunkenData","backgroundColor","padding","borderRadius","width","height","marginRight","marginLeft","textColor","color","fontSize","normal","smaller","small","hasData","formattedData","sunkenLabel","info","processOuterCellStyle","mono","dataNotImportant","dimmedValue","e","join","loading","src","alt","FreshGRLCBanner","title","subdomain","subtitle","subtext","banner","makeCoinsUrl","CoinSelector","coinSelector","Fragment","separator","selectableCoin","SearchBar","useState","searchFieldValue","updateSearchField","searchObject","setSearchObject","setLoading","isError","setError","searchResults","setSearchResults","selectedObject","setSelectedObject","redirectUrl","redirectTo","useEffect","Promise","all","a","fetch","json","then","results","result","network","filtered","hasOwnProperty","Form","searchbar","onSubmit","trim","Input","placeholder","onChange","Banner","selectableCoins","rounded","number","negative","absolute","Math","abs","valueOf","integer","floor","decimalpart","roundTo","toString","roundedDecimals","toFixed","substring","replace","options","roundedData","isExactlyOne","formatDecimal","Number","PageLoadAnimation","wrapper","pageLoad","inner","padNumber","num","padStart","alwaysIncludeDate","includeDate","Date","now","date","zone","toLocaleTimeString","timeZoneName","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","formatTimeDiff","timestamp1","timestamp2","useSeconds","timeDiff","round","unformatted","Row","labelSubText","labelSubTextLink","extrawide","hasCellLabels","verticalExtraPaddedRow","verticalPaddedRow","verticalPaddedLabel","wideRowLabel","getLabelStyle"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,oBAAsB,iDAAiD,OAAS,oCAAoC,KAAO,oC,oBCA7ID,EAAOC,QAAU,CAAC,mBAAqB,+CAA+C,kBAAoB,8CAA8C,KAAO,iCAAiC,MAAQ,kCAAkC,YAAc,wCAAwC,QAAU,oCAAoC,UAAY,sCAAsC,OAAS,mCAAmC,OAAS,mCAAmC,oBAAsB,gDAAgD,MAAQ,kCAAkC,SAAW,qCAAqC,KAAO,iCAAiC,MAAQ,kCAAkC,QAAU,sC,oBCAptBD,EAAOC,QAAU,CAAC,kBAAoB,6CAA6C,iBAAmB,4CAA4C,KAAO,gCAAgC,OAAS,kCAAkC,QAAU,mCAAmC,YAAc,uCAAuC,cAAgB,yCAAyC,aAAe,wCAAwC,OAAS,kCAAkC,YAAc,uCAAuC,aAAe,wCAAwC,cAAgB,yCAAyC,MAAQ,iCAAiC,SAAW,oCAAoC,KAAO,kC,oBCAruBD,EAAOC,QAAU,CAAC,aAAe,gD,oBCAjCD,EAAOC,QAAU,CAAC,gBAAkB,2C,8LCiBvBC,EAAwC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAC9CC,EAAWC,qBAAWC,KAEtBC,EAAiB,CACnB,CACIC,MAAO,WACPC,MAAO,CACH,CACIC,KAAMC,YAAWR,EAAYS,WAAW,GACxCC,SAAS,KAIrB,CACIL,MAAO,YACPC,MAAO,CACH,CACIC,KAAMP,EAAYW,MACZH,YACIR,EAAYW,MAAMF,UAAYT,EAAYW,MAAMF,UAAYT,EAAYW,MAAMC,WAC9E,IAEHZ,EAAYS,UAAZ,kBACgBI,YAAuBb,EAAYS,UAAWT,EAAYW,MAAMF,WADhF,KAEK,IACN,IACNC,SAAS,KAIrB,CACIL,MAAO,WACPC,MAAO,CACH,CACIC,KAAMP,EAAYW,MAAQX,EAAYW,MAAMG,KAAO,IACnDC,KACIf,EAAYW,OAASV,EAArB,WACUA,EAASe,OADnB,mBACoChB,EAAYW,MAAMG,WAChDG,EACVC,UAAW,CACPC,UAAW,aAK3B,CACId,MAAO,mBACPC,MAAO,CACH,CACIC,KAAMP,EAAYoB,WAClBC,KAAMpB,EAAWA,EAASqB,mBAAgBL,EAC1CM,gBAAgB,KAI5B,CACIlB,MAAO,OACPC,MAAO,CACH,CACIC,KAAMP,EAAYwB,KAClBH,KAAM,UAIlB,CACIhB,MAAO,aACPC,MAAO,CACiB,IAApBN,EAAYyB,IACN,CACIlB,KAAMP,EAAYyB,IAClBJ,KAAMpB,EAAWA,EAASqB,mBAAgBL,EAC1CM,gBAAgB,GAEpBvB,EAAY0B,SACZ,CACInB,KAAM,6BACNG,SAAS,GAEb,CACIH,KAAM,OACNG,SAAS,KAI3B,CACIL,MAAO,UACPC,MAAO,CACFN,EAAY0B,SAOP,CACInB,KAAM,KAPV,CACIA,KAAOP,EAAYyB,IAAMzB,EAAYwB,KAAQ,IAC7CH,KAAMpB,EAAW,OAAMA,EAASqB,cAAgB,aAAUL,EAC1DM,gBAAgB,EAChBI,SAAU,MAOnBC,KACT,SAACC,GAOG,OANAA,EAAIvB,MAAMwB,SAAQ,SAACC,QACQd,IAAnBc,EAAKb,YACLa,EAAKb,UAAY,IAErBa,EAAKb,UAAUc,MAAQ,UAEpBH,KAIf,OACI,yBAAKI,UAAWC,IAAQC,qBACpB,wBAAIF,UAAWC,IAAQE,QAAvB,eACgB,0BAAMH,UAAWC,IAAQG,MAAOrC,EAAYqC,OAE3DjC,EAAMwB,KAAI,SAACU,EAAOC,GAAR,OACP,kBAAC,IAAD,eAAKC,IAAKD,EAAOE,MAAM,EAAMC,WAAW,SAAYJ,S,iCCxHvDK,EAAuC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7CC,EAAqB,SAACC,GACxB,GAAuB,OAAnBA,EAAOC,QACP,MAAO,CAAC,mBAAoB,SAAUD,EAAOE,QAGjD,IAAMC,EAAWH,EAAOC,QAAQG,MAAM,MACtC,OAAID,EAASE,OAAS,EACX,CAACF,EAAS,GAAK,UAAWA,EAAS,GAAIA,EAAS,IAGpD,CAACH,EAAOC,QAAS,SAAUD,EAAOE,SAEvCI,EAAuB,SAACN,GAAD,OAAwCD,EAAmBC,GAAQ,IAG1FO,EAAe,SAACP,GAAD,SACjBA,EAAOC,SAA6C,SAAlCD,EAAOC,QAAQG,MAAM,MAAM,KAE3CjD,EAAWC,qBAAWC,KAC5B,OACI,yBAAK8B,UAAWC,IAAQoB,oBACnBV,EAAQhB,KAAI,SAACkB,EAAQP,GAAT,OACT,yBAAKC,IAAKD,EAAON,UAAWC,IAAQqB,mBAChC,yBAAKtB,UAAWC,IAAQsB,OAAxB,UACA,yBAAKvB,UAAWC,IAAQuB,aAA+B,QAAhBX,EAAOY,KAAiB,IAAMxB,IAAQyB,oBAAsB,KAC/F,yBAAK1B,UAAWC,IAAQa,SAA2B,QAAhBD,EAAOY,KAAiB,IAAMxB,IAAQ0B,UAAY,KAChE,QAAhBd,EAAOY,MAAkC,SAAhBZ,EAAOY,KAC7B,kBAAC,IAAD,CAAMG,GAAE,WAAM5D,EAASe,OAAf,oBAAiC8B,EAAOC,SAAWd,UAAWC,IAAQ3B,MAAO6C,EAAqBN,IAE1G,yBAAKb,UAAWC,IAAQ3B,MAAO6C,EAAqBN,KAG5D,yBAAKb,UAAWC,IAAQc,QACpB,yBAAKf,UAAWC,IAAQE,QApBlB,SAACU,GAAD,OAAwCD,EAAmBC,GAAQ,GAoBxCgB,CAAsBhB,GAAvD,KACA,yBAAKb,UAAWC,IAAQ3B,MApBtB,SAACuC,GAAD,OAAwCD,EAAmBC,GAAQ,GAoBtCiB,CAAkBjB,MAGtC,IAAlBA,EAAOkB,QAAiBX,EAAaP,GAYlC,KAXA,yBAAKb,UAAWC,IAAQ+B,OACpB,yBAAKhC,UAAWC,IAAQ3B,MACnB2D,YAAqBpB,EAAOkB,OAAQ,CACjCrC,SAAU,EACVN,KAAMpB,EAAWA,EAASqB,mBAAgBL,EAC1CM,gBAAgB,EAChB4C,aAAcjC,IAAQP,SACtByC,UAAWlC,IAAQb,SAKlCyB,EAAOuB,QACJ,yBAAKpC,UAAWC,IAAQoC,OACnBrE,EACG,kBAAC,IAAD,CACIgC,UAAWC,IAAQ3B,KACnBsD,GAAE,WAAM5D,EAASe,OAAf,yBAAsC8B,EAAOuB,QAAQhC,OAF3D,gBAOA,yBAAKJ,UAAWC,IAAQ3B,MAAxB,YAGP8C,EAAaP,GAId,KAHA,yBAAKb,UAAWC,IAAQqC,SACpB,yBAAKtC,UAAWC,IAAQ3B,MAAxB,oB,kBChEtBiE,EAAkB,SAACC,GACrB,MAAkB,SAAdA,EACO,4CAEO,UAAdA,EACO,oDAEO,WAAdA,EACO,oEAEO,SAAdA,EACO,2EAEO,UAAdA,EACO,qFADX,GAMSC,EAAsC,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,OAAQjD,EAA+B,EAA/BA,SAAUkD,EAAqB,EAArBA,eAC9D3E,EAAWC,qBAAWC,KAC5B,OACI,yBAAK8B,UAAWC,IAAQ2C,mBACnBF,EAAO/C,KAAI,SAACkD,EAAOvC,GAAR,OACR,yBAAKC,IAAKD,EAAON,UAAWC,IAAQ6C,kBAChC,yBAAK9C,UAAWC,IAAQ8C,QACpB,yBAAK/C,UAAWC,IAAQa,SACJ,QAAf+B,EAAMpB,MAAiC,SAAfoB,EAAMpB,KAC3B,kBAAC,IAAD,CAAMG,GAAE,WAAM5D,EAASe,OAAf,oBAAiC8D,EAAM/B,SAAWd,UAAWC,IAAQ3B,MAAOuE,EAAM/B,SAE1F,yBAAKd,UAAWC,IAAQ3B,MAAOuE,EAAM/B,cAER9B,IAAhCuD,EAAgBM,EAAMpB,MACnB,yBAAKzB,UAAWC,IAAQ+C,eACpB,yBAAKhD,UAAWC,IAAQ3B,MAAOiE,EAAgBM,EAAMpB,QAEzD,OAGZ,yBAAKzB,UAAWC,IAAQgD,cACnBjF,GAAY6E,EAAMzC,KACf,kBAAC,IAAD,CAAMJ,UAAWC,IAAQ3B,KAAMsD,GAAE,WAAM5D,EAASe,OAAf,yBAAsC8D,EAAMzC,OACxE,IACA6B,YAAqBY,EAAMI,aAAc,CACtC7D,KAAM,UAET,KAGL,yBAAKY,UAAWC,IAAQ3B,MACnB,IACA2D,YAAqBY,EAAMI,aAAc,CACtC7D,KAAM,UAET,MAIb,yBAAKY,UAAWC,IAAQ+B,OACpB,yBAAKhC,UAAWC,IAAQ3B,MACnB2D,YAAqBY,EAAMd,OAAQ,CAChCrC,SAAU,EACVN,KAAMpB,EAAWA,EAASqB,mBAAgBL,EAC1CM,gBAAgB,EAChB4C,aAAcjC,IAAQP,SACtByC,UAAWlC,IAAQb,aAMtCK,EACG,yBAAKO,UAAWC,IAAQ6C,kBACpB,yBAAK9C,UAAWC,IAAQ8C,QACpB,yBAAK/C,UAAWC,IAAQa,QAAU,IAAMb,IAAQiD,aAC5C,yBAAKlD,UAAWC,IAAQ3B,MAAxB,4CACA,yBAAK0B,UAAWC,IAAQkD,cACpB,yBAAKnD,UAAWC,IAAQE,QAAxB,SACA,yBAAKH,UAAWC,IAAQ3B,MACnBmB,EAASnB,KAAKqB,KAAI,SAACyD,EAAS9C,GAAV,OACd,yBAAKN,UAAWC,IAAQoD,aAAcD,UAM3D,yBAAKpD,UAAWC,IAAQgD,aAAe,IAAMhD,IAAQqD,eACjD,yBAAKtD,UAAWC,IAAQ3B,MAAxB,0BAEgBU,IAAnB2D,EACG,yBAAK3C,UAAWC,IAAQ+B,OACpB,yBAAKhC,UAAWC,IAAQ3B,MACnB2D,YAAqBU,EAAgB,CAClCjD,SAAU,EACVN,KAAMpB,EAAWA,EAASqB,mBAAgBL,EAC1CM,gBAAgB,EAChB4C,aAAcjC,IAAQP,SACtByC,UAAWlC,IAAQb,SAI/B,MAER,O,kBCzGHmE,EAA4C,SAAC,GAAgD,IAA9CxF,EAA6C,EAA7CA,YAAa4C,EAAgC,EAAhCA,QAAS6C,EAAuB,EAAvBA,iBAC9E,OACI,yBAAKxD,UAAWC,IAAQwD,cACpB,kBAAC,EAAD,CACIf,OAAQc,EACR/D,SAAU1B,EAAY0B,SAAW1B,EAAY0B,SAA4B,KACzEkD,eAAgB5E,EAAYoB,aAEhC,kBAAC,EAAD,CAAoBwB,QAAS+C,OAAOC,OAAOhD,O,0CCMjDiD,EAAiB,SAAClB,GACpB,IAAImB,EAAiE,GAoBrE,OAlBAnB,EAAO7C,SAAQ,SAACgD,GACZ,IAAMtC,EAAMsC,EAAM/B,QAAU,IAAM+B,EAAMpB,KAElClB,KAAOsD,GASTA,EAAetD,GAAKwB,QAAUc,EAAMd,OACpC8B,EAAetD,GAAK0C,cAAgB,EACpCY,EAAetD,GAAKH,UAAOpB,GAV3B6E,EAAetD,GAAO,CAClBO,QAAS+B,EAAM/B,QACfW,KAAMoB,EAAMpB,KACZM,OAAQc,EAAMd,OACdkB,aAAc,EACd7C,KAAMyC,EAAMiB,OAAO1D,SASxBsD,OAAOC,OAAOE,IAGZE,EAAoC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAC1CC,EAAUC,YAAWF,EAAYG,MACjCnG,EAAWoG,YAAYJ,EAAYG,MAFyB,EAGlBE,IAAQ,UACjDJ,EADiD,yBACzBD,EAAY5D,KADa,4BAAhDkE,EAH0D,EAG1DA,UAAiBvG,EAHyC,EAG/CO,KAAmBiG,EAH4B,EAG5BA,MAH4B,EAMbF,IAAQ,UACtDJ,EADsD,yBAC9BD,EAAY5D,KADkB,aAA1CoE,EAN+C,EAM1DF,UAAgCG,EAN0B,EAMhCnG,KANgC,EASX+F,IAAQ,UACxDJ,EADwD,yBAChCD,EAAY5D,KADoB,cAA5CsE,EAT+C,EAS1DJ,UAAiCK,EATyB,EAS/BrG,KAGnC,OAAa,MAATiG,GACAK,QAAQC,IAAIN,GACL,kBAAC,IAAD,CAAU3C,GAAG,YAAYkD,MAAM,KAGtC,kBAAC,IAAgBC,SAAjB,CAA0B/C,MAAOhE,GAC7B,kBAAC,IAAD,CAAQgH,MAAOC,cAAeC,cAAelH,EAAWA,EAASe,YAASC,IACxEsF,GAA4B,MAAfvG,EAkBX,kBAAC,IAAD,MAjBA,yBAAKiC,UAAWC,IAAQkF,iBACpB,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAqBpH,YAAaA,KAEtC,kBAAC,IAAD,CAASoC,OAAO,eACTqE,GAAkBE,GAA8B,MAAZD,GAAiC,MAAbE,EAOvD,kBAAC,IAAD,MANA,kBAAC,EAAD,CACI5G,YAAaA,EACb4C,QAASgE,EACTnB,iBAAkBI,EAAeF,OAAOC,OAAOc,W,gCClF/E,6CAIavG,EAAkBkH,wBAAyB,O,gCCFxD,kCAAO,IAAMlB,EAAa,SAACnF,GAAD,qDAAsEA,K,gCCAhG,wEAAMsG,EAAqB,CACvB,CACItG,OAAQ,OACRuG,KAAM,YACNC,YAAa,YACblG,cAAe,OACfmG,UAAW,GACXC,YAAa,GACbC,KAAM,iBAEV,CACI3G,OAAQ,MACRuG,KAAM,UACNC,YAAa,UACblG,cAAe,MACfmG,UAAW,GACXC,YAAa,KACbC,KAAM,eAEV,CACI3G,OAAQ,QACRuG,KAAM,oBACNC,YAAa,oBACblG,cAAe,QACfmG,UAAW,GACXC,YAAa,GACbC,KAAM,kBAIDtB,EAAc,SAACrF,GACxB,OAAOsG,EAAMM,QAAO,SAACxB,GAAD,OAAUA,EAAKpF,SAAWA,KAAQ,IAG7CkG,EAAc,kBAAMI,I,gCCpCjC,uEASaO,EAA4B,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAAU1F,EAAa,EAAbA,OAClD,OACI,yBAAKH,UAAWC,IAAQ6F,aACnB3F,EAAS,wBAAIH,UAAWC,IAAQ8F,eAAgB5F,GAAe,KAC/D0F,K,mBCZbjI,EAAOC,QAAU,CAAC,YAAc,6BAA6B,cAAgB,iC,gCCD7E,uGAWamI,EAAwB,SAAC,GAY/B,IAXH5H,EAWE,EAXFA,MACA6H,EAUE,EAVFA,WACA3H,EASE,EATFA,KACAQ,EAQE,EARFA,KACAoH,EAOE,EAPFA,aACA9G,EAME,EANFA,KACAX,EAKE,EALFA,QACAiB,EAIE,EAJFA,SACAyG,EAGE,EAHFA,YACA7G,EAEE,EAFFA,eACAL,EACE,EADFA,UAEMmH,EAAa,SAACC,EAAuBpH,GACvC,IAAIe,EAAYC,IAAQnB,MAAQG,GAAqC,WAAxBA,EAAUC,UAAyB,IAAMe,IAAQqG,gBAAkB,IAChH,OAAOxH,EACHoH,EACI,uBACIlG,UAAWA,EACXuG,KAAMzH,EACN0H,OAAO,SACPC,IAAI,sBACJC,MAAOC,EAAsB1H,IAE5BoH,GAGL,kBAAC,IAAD,CAAMrG,UAAWA,EAAW4B,GAAI9C,EAAM4H,MAAOC,EAAsB1H,IAC9DoH,GAIT,yBAAKK,MAAOC,EAAsB1H,IAAaoH,IAIjDO,EAAmB,SAACC,EAAoB5H,GAC1C,IAAIyH,EAA6B,GAEjC,GAAKzH,EAuCL,OAnCIA,EAAU6H,QAAU7H,EAAU8H,cAC1BF,GACAH,EAAMM,gBAAkB,UACxBN,EAAMO,QAAU,MAChBP,EAAMQ,aAAe,OACrBR,EAAMS,MAAQ,OAEdT,EAAMU,OAAS,QAInBP,GAAa5H,EAAUc,QACC,SAApBd,EAAUc,MACV2G,EAAMW,YAAc,OACO,UAApBpI,EAAUc,QACjB2G,EAAMY,WAAa,SAIvBT,GAAa5H,EAAUsI,YACvBb,EAAMc,MAAQvI,EAAUsI,YAGvBV,GAAa5H,EAAUM,OACxBmH,EAAMS,MAAQlI,EAAUM,OAGvBsH,GAAa5H,EAAUwI,WACxBf,EAAMe,SAAW,CACbC,YAAQ1I,EACR2I,QAAS,MACTC,MAAO,OACT3I,EAAUwI,WAGTf,GAKLC,EAAwB,SAAC1H,GAAD,OAC1B2H,GAAiB,EAAM3H,IAErB4I,EAAmB,OAATvJ,QAA0BU,IAATV,EAC3BwJ,EAAgBD,EAChB5F,YAAqB3D,EAA2B,CAC5CoB,WACAyG,cACA/G,OACAE,iBACA4C,aAAcjC,IAAQP,SACtByC,UAAWlC,IAAQb,YAEvBJ,EAEN,OACI,yBAAKgB,UAAS,UAAKC,IAAQH,KAAb,YAAqBb,GAAaA,EAAUuI,MAAQvH,IAAQhB,EAAUuI,MAAQ,QAAU,KACjGpJ,EAAQ,wBAAI4B,UAAWC,IAAQ7B,OAAS6H,EAAa,IAAMhG,IAAQgG,WAAa,KAAOhH,GAAaA,EAAU6H,OAAS,IAAM7G,IAAQ8H,YAAc,KAAM3J,GAAc,KACxK,yBAAK4B,UAAWC,IAAQ+H,KAAMtB,MApBR,SAACzH,GAAD,OAC1B2H,GAAiB,EAAO3H,GAmBiBgJ,CAAsBhJ,IAEnDmH,EADHyB,EACc,yBACP7H,UAAW,CACPvB,OAAUO,EAAYiB,IAAQiI,KAC9BjJ,GAAaA,EAAUkJ,iBAAmBlI,IAAQmI,iBAAcpJ,GAClE2G,QAAO,SAAA0C,GAAC,YAAUrJ,IAANqJ,KAAiBC,KAAK,MACtCR,GAES,yBAAK9H,UAAWC,IAAQsI,QAASC,IAAKD,IAASE,IAAI,YAFtCxJ,O,mBCtH5CrB,EAAOC,QAAU,CAAC,OAAS,gCAAgC,UAAY,mCAAmC,QAAU,mC,mBCApHD,EAAOC,QAAU,CAAC,aAAe,mCAAmC,UAAY,kC,mBCAhFD,EAAOC,QAAU,CAAC,UAAY,+B,uGCWjB6K,EAAoC,YAAmD,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAEpF,OADAH,EAAQA,GAAgB,gBAEpB,yBAAK3I,UAAWC,IAAQ8I,QACpB,4BAAMH,EAAa,0BAAM5I,UAAWC,IAAQ2I,WAAYA,EAArC,KAA2D,GAAID,GAChFE,EAAY,4BAAKA,QAAkB7J,EACnC8J,EAAW,yBAAK9I,UAAWC,IAAQ6I,SAAUA,QAAkB9J,I,iBCDvEgK,EAAe,SAAC7E,GAElB,YAAsBnF,IADAmF,QACqCnF,IADrCmF,EAC2Ba,MACvBb,EACDa,MAAMsD,KAAK,KAE5BnE,EAAmBpF,QAGlBkK,EAAiC,YAAqB,IAAVjE,EAAS,EAATA,MACrD,OACI,yBAAKhF,UAAWC,IAAQiJ,cAAxB,wBAGQlE,EAAMrF,KAAI,SAACwE,EAAM7D,GAAP,OACN,kBAAC,IAAM6I,SAAP,CAAgB5I,IAAKD,GAChBA,EAAS,0BAAMN,UAAWC,IAAQmJ,WAAY,UAAoB,GACnE,uBAAGpJ,UAAWC,IAAQoJ,eAAgB9C,KAAI,WAAMyC,EAAa7E,GAAnB,WAAmCA,EAAKmB,Y,0ECP7FgE,G,MAA8B,YAAoC,IAAzBtE,EAAwB,EAAxBA,MAAOE,EAAiB,EAAjBA,cAAiB,EAC5BqE,mBAAiB,IADW,mBACnEC,EADmE,KACjDC,EADiD,OAElCF,mBAAiB,IAFiB,mBAEnEG,EAFmE,KAErDC,EAFqD,OAG1CJ,oBAAkB,GAHwB,mBAGnEjF,EAHmE,KAGxDsF,EAHwD,OAI9CL,oBAAkB,GAJ4B,mBAInEM,EAJmE,KAI1DC,EAJ0D,OAKhCP,wBAAiDvK,GALjB,mBAKnE+K,EALmE,KAKpDC,EALoD,OAM9BT,wBAA+CvK,GANjB,mBAMnEiL,EANmE,KAMnDC,EANmD,OAOxCX,wBAA6BvK,GAPW,mBAOnEmL,EAPmE,KAOtDC,EAPsD,KA2E1E,OAlEAC,qBAAU,WACNP,GAAS,KACV,CAACN,IAEJa,qBAAU,WACe,KAAjBX,GAKJE,GAAW,GACXU,QAAQC,IACJvF,EAAMrF,IAAN,uCACI,WAAOwE,GAAP,SAAAqG,EAAA,sEACWC,MAAM,GAAD,OAAIvG,YAAWC,EAAKpF,QAApB,mBAAsC2K,IADtD,uCACuEgB,QADvE,2CADJ,wDAKCC,MAAK,SAACC,GAAD,OACFA,EACKjL,KAAI,SAACkL,EAAQvK,GACV,MAAO,CACHuK,OAAQA,EACRC,QAAS9F,EAAM1E,GAAOvB,WAG7B4G,QAAO,SAACkF,GAAD,OAA8B,OAAlBA,EAAOA,aAElCF,KAAKX,IArBNJ,GAAW,KAsBhB,CAAC5E,EAAO0E,IAEXW,qBAAU,WAEN,GADAT,GAAW,QACW5K,IAAlB+K,EAEJ,GAA6B,IAAzBA,EAAc7I,OAAlB,CAKA,GAAI6I,EAAc7I,OAAS,QAAuBlC,IAAlBkG,EAA6B,CACzD,IAAM6F,EAAWhB,EAAcpE,QAAO,SAACkF,GAAD,OAAYA,EAAOC,UAAY5F,KACrE,GAAI6F,EAAS7J,OAAS,EAElB,YADAgJ,EAAkBa,EAAS,IAKnCb,EAAkBH,EAAc,SAZ5BD,GAAS,KAad,CAACC,EAAe7E,IAEnBmF,qBAAU,WACN,QAAuBrL,IAAnBiL,GAA0D,OAA1BA,EAAeY,OAEnD,GAAIZ,EAAeY,OAAOG,eAAe,QAAS,CAC9C,IAAMjN,EAAckM,EAAeY,OACnCT,EAAW,IAAD,OAAKH,EAAea,QAApB,yBAA4C/M,EAAYqC,YAC/D,GAAI6J,EAAeY,OAAOG,eAAe,QAAS,CACrD,IAAMtM,EAAQuL,EAAeY,OAC7BT,EAAW,IAAD,OAAKH,EAAea,QAApB,mBAAsCpM,EAAMG,WACnD,CACH,IAAMiC,EAAUmJ,EAAeY,OAC/BT,EAAW,IAAD,OAAKH,EAAea,QAApB,oBAAuChK,EAAQA,aAE9D,CAACmJ,SAGmBjL,IAAhBmL,EACH,kBAACc,EAAA,EAAD,CAAMjL,UAAWC,IAAQiL,UAAWC,SAAU,kBAAMxB,EAAgBH,EAAiB4B,UACjF,kBAACH,EAAA,EAAKI,MAAN,CACI9L,KAAK,QACL+L,YAAY,8CACZ/C,QAASjE,EACTC,MAAOsF,EACP7H,MAAOwH,EACP+B,SAAU,SAAClD,GAAD,OAAOoB,EAAkBpB,EAAE7B,OAAOxE,WAIpD,kBAACiJ,EAAA,EAAD,CAAMjL,UAAWC,IAAQiL,UAAWC,SAAU,kBAAMxB,EAAgBH,EAAiB4B,UACjF,kBAAC,IAAD,CAAUtG,MAAI,EAAClD,GAAIuI,IACnB,kBAACc,EAAA,EAAKI,MAAN,CACI9L,KAAK,QACL+L,YAAY,8CACZ/C,QAASjE,EACTC,MAAOsF,EACP7H,MAAOwH,EACP+B,SAAU,SAAClD,GAAD,OAAOoB,EAAkBpB,EAAE7B,OAAOxE,a,QC1G/CwJ,EAA2B,YAAoC,IAAzBxG,EAAwB,EAAxBA,MAAOE,EAAiB,EAAjBA,cAChDuG,EAA0C,CAC5CrH,YAAY,QACZA,YAAY,OACZ,CAAEkB,KAAM,SAAUN,MAAO,CAAC,OAAQ,QAClCZ,YAAY,UAEhB,OACI,kBAAC,EAAD,CAAiBwE,UAAU,WAAWC,SAAS,4BAA4BC,QACvE,oCACI,kBAAC,EAAD,CAAc9D,MAAOyG,IACrB,kBAAC,EAAD,CAAWzG,MAAOA,EAAOE,cAAeA,S,gCC3BxD,sDAEawG,EAAU,SAACC,EAAgBjM,GAAuF,IAApEyG,EAAmE,uDAA7C,EACvEyF,EAAWD,EAAS,EACpBE,EAAWC,KAAKC,IAAIJ,EAAOK,WAC3BC,EAAUH,KAAKI,MAAML,GACrBM,EAAcN,EAAWI,EACzBG,OAAuBpN,IAAbU,EAAyBA,EAAWyM,EAAYE,WAAWnL,OAAS,EAAIiF,EAAcA,OAAcnH,EAC9GsN,QACUtN,IAAZoN,EAAwBD,EAAYI,QAAQH,GAAWD,EAAYE,YACrEG,UAAU,EAAG,EAAIrG,GAEnB,MAAO,CACHyF,EAAuB,IAAZK,EAAgB,MAAQA,EAAUA,EACzB,KAApBK,OACiBtN,IAAbU,EAAyB4M,EAAkBA,EAAgBG,QAAQ,MAAO,SAC1EzN,IAuBCiD,EAAuB,SAACD,EAAwB0K,GAAqC,IAG1FC,EACA7E,EACA8E,EAJIlN,EAAyEgN,EAAzEhN,SAAUyG,EAA+DuG,EAA/DvG,YAAa/G,EAAkDsN,EAAlDtN,KAAME,EAA4CoN,EAA5CpN,eAAgB4C,EAA4BwK,EAA5BxK,aAAcC,EAAcuK,EAAdvK,UAenE,MATqB,kBAAVH,EAEP8F,EA5BqB,SAACmE,EAA0B/J,EAAuBoK,GAC3E,OACI,oCACKL,EACAK,EAAkB,0BAAMtM,UAAWkC,GAAjB,IAAiCoK,GAA0B,MAwBlEO,EADhBF,EAAcjB,EAAQ1J,EAAOtC,EAAUyG,IACG,GAAIjE,EAAcyK,EAAY,KAExEA,EAAcjB,EAAQoB,OAAO9K,GAAQtC,EAAUyG,GAC/C2B,EAAgB9F,GAEpB4K,EAAeD,EAAY,IAAM,EAAE,EAAG,GAGlC,oCACK7E,EACA1I,EACG,yBAAKY,UAAWmC,GACX,IACA/C,EACAwN,GAAgBtN,EAAiB,GAAK,KAE3C,Q,gCChEhB,wFAMayN,EAA8B,WACvC,OACI,yBAAK/M,UAAWC,IAAQ+M,SACpB,yBAAKhN,UAAWC,IAAQgN,UACpB,yBAAKjN,UAAWC,IAAQiN,OACpB,yBAAK1E,IAAKD,IAASE,IAAI,KACvB,+C,mBCXpB7K,EAAOC,QAAU,CAAC,QAAU,mCAAmC,SAAW,oCAAoC,MAAQ,mC,mBCDtHD,EAAOC,QAAU,IAA0B,2C,sICApC,IAAMsP,EAAY,SAACC,GACtB,OAAOA,EAAIf,WAAWgB,SAAS,EAAG,MCCzB9O,EAAa,SAACI,EAAsC2O,GAC7D,GAAkB,OAAd3O,QAAoCK,IAAdL,EACtB,MAAO,UAGX,IAAM4O,EAAuBD,GAAqBE,KAAKC,MAAQ,IAAO9O,EAAY,MAC5E+O,EAAO,IAAIF,KAAiB,IAAZ7O,GAChBgP,GAAO,IAAIH,MAAOI,mBAAmB,QAAS,CAAEC,aAAc,UAAW5M,MAAM,KAAK,GAG1F,OACKsM,EAAW,UACHJ,EAAUO,EAAKI,WADZ,YAC0BX,EAAUO,EAAKK,WAAa,GADtD,YAC4DZ,EAAUO,EAAKM,eAD3E,KAEN,IAFN,UAGGb,EAAUO,EAAKO,YAHlB,YAGiCd,EAAUO,EAAKQ,cAHhD,YAGiEf,EAAUO,EAAKS,cAHhF,YAGiGR,IAI5FS,EAAiB,SAACC,EAAqBC,EAAqBC,GACrE,QAAmBvP,IAAfqP,GAA2C,OAAfA,QAAsCrP,IAAfsP,EACnD,MAAO,CAAC,eAAWtP,GAGvB,IAAMwP,EAAWF,EAAaD,EAE9B,OAAIG,EAAW,GACJD,EAAa,CAACC,EAAU,UAAY,CAAC,KAAM,UAElDA,EAAW,KACJ,CAAC1C,KAAK2C,MAAMD,EAAW,IAAK,UAEnCA,EAAW,MACJ,CAAC1C,KAAK2C,MAAMD,EAAW,MAAO,QAErCA,EAAW,OACJ,CAAC1C,KAAK2C,MAAMD,EAAW,OAAQ,OAEtCA,EAAW,OACJ,CAAC1C,KAAK2C,MAAMD,EAAW,QAAS,QAEvCA,EAAW,SACJ,CAAC1C,KAAK2C,MAAMD,EAAW,QAAU,SAErC,CAAC1C,KAAK2C,MAAMD,EAAW,UAAY,SAGjC5P,EAAyB,SAACyP,EAAqBC,EAAqBC,GAC7E,IAAMG,EAAcN,EAAeC,EAAYC,EAAYC,GAC3D,OAAOG,EAAY,GAAGrC,WAAa,IAAMqC,EAAY,IAAyB,IAAnBA,EAAY,GAAW,IAAM,M,mBClD5F9Q,EAAOC,QAAU,IAA0B,qC,mBCC3CD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,YAAc,0BAA0B,WAAa,yBAAyB,KAAO,mBAAmB,KAAO,mBAAmB,YAAc,0BAA0B,SAAW,uBAAuB,KAAO,mBAAmB,QAAU,sBAAsB,KAAO,mBAAmB,gBAAkB,8BAA8B,WAAa,yBAAyB,YAAc,0BAA0B,UAAY,wBAAwB,WAAa,2B,gCCDvhB,sFASa8Q,EAAsB,SAAC,GAAmF,IAAjFvQ,EAAgF,EAAhFA,MAAOqC,EAAyE,EAAzEA,WAAYmO,EAA6D,EAA7DA,aAAcC,EAA+C,EAA/CA,iBAAkBxQ,EAA6B,EAA7BA,MAAOmC,EAAsB,EAAtBA,KAAMsO,EAAgB,EAAhBA,UAW9FC,GAAyB,EAQ7B,OANA1Q,EAAMwB,SAAQ,SAACC,QACQd,IAAfc,EAAK1B,QACL2Q,GAAgB,MAKpB,yBACI/O,UAAS,oBACXC,IAAQL,IADG,YACIkP,EAAY7O,IAAQ+O,uBAAyBD,GAAiBvO,EAAOP,IAAQgP,kBAAoB,KAE9G,wBACIjP,UAAS,UAAKC,IAAQ7B,MAAb,YAAsB2Q,EAAgB9O,IAAQiP,oBAAsB,GAApE,YACL1O,EAAOP,IAAQkP,aAAe,IAElCzI,MA3BU,SAACS,GACnB,IAAIT,EAA6B,GAMjC,OAJIS,IACAT,EAAMS,MAAQA,GAGXT,EAoBQ0I,CAAc3O,IAEpBrC,EACAwQ,EACG,oCACI,6BACA,0BAAM5O,UAAWC,IAAQ2O,cACxBC,EACG,kBAAC,IAAD,CAAMjN,GAAIiN,GAAmBD,GAC7BA,SAGR5P,GAEPX,EAAMsB,KAAI,SAACG,EAAMQ,GAAP,OACP,kBAAC,IAAD,eAAMC,IAAKD,GAAWR,U,mBCnDtClC,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,mBAAmB,aAAe,0BAA0B,aAAe,0BAA0B,oBAAsB,iCAAiC,kBAAoB,+BAA+B,uBAAyB","file":"static/js/6.897159d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionMetaInfo\":\"TransactionMetaInfo_transactionMetaInfo__1TF_O\",\"header\":\"TransactionMetaInfo_header__2JsvT\",\"txid\":\"TransactionMetaInfo_txid__TpKiJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionOutputs\":\"TransactionOutputs_transactionOutputs__LlI7s\",\"transactionOutput\":\"TransactionOutputs_transactionOutput__f28hO\",\"data\":\"TransactionOutputs_data__1-3uJ\",\"arrow\":\"TransactionOutputs_arrow__25zTn\",\"destination\":\"TransactionOutputs_destination__24w4j\",\"address\":\"TransactionOutputs_address__3KTHD\",\"rawOutput\":\"TransactionOutputs_rawOutput__2jgKI\",\"script\":\"TransactionOutputs_script__3MrFP\",\"header\":\"TransactionOutputs_header__3fGaa\",\"destinationOverflow\":\"TransactionOutputs_destinationOverflow__1UbkM\",\"value\":\"TransactionOutputs_value__2QKEM\",\"decimals\":\"TransactionOutputs_decimals__2c7ZE\",\"unit\":\"TransactionOutputs_unit__4Lbz7\",\"spent\":\"TransactionOutputs_spent__bFXne\",\"unspent\":\"TransactionOutputs_unspent__9TYAU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionInputs\":\"TransactionInputs_transactionInputs__1Db8R\",\"transactionInput\":\"TransactionInputs_transactionInput__1EzeR\",\"data\":\"TransactionInputs_data__Ha-lj\",\"source\":\"TransactionInputs_source__2B8AA\",\"address\":\"TransactionInputs_address__1OscK\",\"textAddress\":\"TransactionInputs_textAddress__1RGuz\",\"signatureType\":\"TransactionInputs_signatureType__2tbiV\",\"coinbasedata\":\"TransactionInputs_coinbasedata__1QIDw\",\"header\":\"TransactionInputs_header__UMYLA\",\"datasegment\":\"TransactionInputs_datasegment__1x-2p\",\"inputsAmount\":\"TransactionInputs_inputsAmount__35eJi\",\"coinbaseInput\":\"TransactionInputs_coinbaseInput__3oI_-\",\"value\":\"TransactionInputs_value__e40Pi\",\"decimals\":\"TransactionInputs_decimals__EFCuo\",\"unit\":\"TransactionInputs_unit__nTfSj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"coinMovement\":\"TransactionCoinMovement_coinMovement__3vI8E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionView\":\"TransactionView_transactionView__2YJvP\"};","import React, { useContext } from 'react';\n\nimport { ICell, ICellStyle } from 'interfaces/ICell.interface';\nimport { IRow } from 'interfaces/IRow.interface';\nimport { IBlockTransactionWithBlockInfo } from 'interfaces/ITransaction.interface';\n\nimport { CoinInfoContext } from 'context/CoinInfo.context';\n\nimport { Row } from 'components/Row/Row.component';\n\nimport { formatTime, formatTimeDiffToString } from 'utils/formatTime.util';\n\nimport classes from './TransactionMetaInfo.module.scss';\n\ninterface IProps {\n    transaction: IBlockTransactionWithBlockInfo;\n}\n\nexport const TransactionMetaInfo: React.FC<IProps> = ({ transaction }) => {\n    const coinInfo = useContext(CoinInfoContext);\n\n    const table: IRow[] = ([\n        {\n            label: 'Received',\n            cells: [\n                {\n                    data: formatTime(transaction.firstseen, true),\n                    notMono: true\n                },\n            ],\n        },\n        {\n            label: 'Confirmed',\n            cells: [\n                {\n                    data: transaction.block\n                        ? formatTime(\n                              transaction.block.firstseen ? transaction.block.firstseen : transaction.block.timestamp,\n                              true\n                          ) +\n                          (transaction.firstseen\n                              ? ` (After ${formatTimeDiffToString(transaction.firstseen, transaction.block.firstseen)})`\n                              : '')\n                        : '-',\n                    notMono: true\n                },\n            ],\n        },\n        {\n            label: 'In block',\n            cells: [\n                {\n                    data: transaction.block ? transaction.block.hash : '-',\n                    link:\n                        transaction.block && coinInfo\n                            ? `/${coinInfo.ticker}/blocks/${transaction.block.hash}`\n                            : undefined,\n                    cellStyle: {\n                        linkColor: 'normal'\n                    }\n                },\n            ],\n        },\n        {\n            label: 'Total transacted',\n            cells: [\n                {\n                    data: transaction.totalvalue,\n                    unit: coinInfo ? coinInfo.displaySymbol : undefined,\n                    alwaysSingular: true,\n                },\n            ],\n        },\n        {\n            label: 'Size',\n            cells: [\n                {\n                    data: transaction.size,\n                    unit: 'byte',\n                },\n            ],\n        },\n        {\n            label: 'Mining fee',\n            cells: [\n                transaction.fee !== 0\n                    ? {\n                          data: transaction.fee,\n                          unit: coinInfo ? coinInfo.displaySymbol : undefined,\n                          alwaysSingular: true,\n                      }\n                    : transaction.coinbase\n                    ? {\n                          data: 'None: coinbase transaction',\n                          notMono: true,\n                      }\n                    : {\n                          data: 'Free',\n                          notMono: true,\n                      },\n            ],\n        },\n        {\n            label: 'Feerate',\n            cells: [\n                !transaction.coinbase\n                    ? {\n                          data: (transaction.fee / transaction.size) * 1000000,\n                          unit: coinInfo ? 'µ' + coinInfo.displaySymbol + '/byte' : undefined,\n                          alwaysSingular: true,\n                          decimals: 3,\n                      }\n                    : {\n                          data: '-',\n                      },\n            ],\n        },\n    ] as IRow[]).map(\n        (row: IRow): IRow => {\n            row.cells.forEach((cell: ICell) => {\n                if (cell.cellStyle === undefined) {\n                    cell.cellStyle = {} as ICellStyle;\n                }\n                cell.cellStyle.align = 'left';\n            });\n            return row;\n        }\n    );\n\n    return (\n        <div className={classes.transactionMetaInfo}>\n            <h3 className={classes.header}>\n                Transaction <span className={classes.txid}>{transaction.txid}</span>\n            </h3>\n            {table.map((entry, index) => (\n                <Row key={index} wide={true} labelWidth=\"200px\" {...entry} />\n            ))}\n        </div>\n    );\n};\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { ITransactionOutput } from 'interfaces/ITransaction.interface';\nimport { CoinInfoContext } from 'context/CoinInfo.context';\n\nimport { formatNumericalValue } from 'utils/formatNumericalValue.util';\n\nimport classes from './TransactionOutputs.module.scss';\n\ninterface IProps {\n    outputs: ITransactionOutput[];\n    padToAmount?: number;\n}\n\nexport const TransactionOutputs: React.FC<IProps> = ({ outputs }) => {\n    const convertDestination = (output: ITransactionOutput): [string, string, string] => {\n        if (output.address === null) {\n            return ['Raw redeemscript', 'Script', output.script];\n        }\n\n        const splitted = output.address.split(': ');\n        if (splitted.length > 1) {\n            return [splitted[0] + ' output', splitted[0], splitted[1]];\n        }\n\n        return [output.address, 'Script', output.script];\n    };\n    const getDestinationHeader = (output: ITransactionOutput): string => convertDestination(output)[0];\n    const getDestinationRawType = (output: ITransactionOutput): string => convertDestination(output)[1];\n    const getDestinationRaw = (output: ITransactionOutput): string => convertDestination(output)[2];\n    const isDataOutput = (output: ITransactionOutput): boolean =>\n        output.address && output.address.split(': ')[0] === 'Data' ? true : false;\n\n    const coinInfo = useContext(CoinInfoContext);\n    return (\n        <div className={classes.transactionOutputs}>\n            {outputs.map((output, index) => (\n                <div key={index} className={classes.transactionOutput}>\n                    <div className={classes.arrow}>➔</div>\n                    <div className={classes.destination + (output.type === 'raw' ? ' ' + classes.destinationOverflow : '')}>\n                        <div className={classes.address + (output.type === 'raw' ? ' ' + classes.rawOutput : '')}>\n                            {output.type !== 'raw' && output.type !== 'data' ? (\n                                <Link to={`/${coinInfo.ticker}/address/${output.address}`} className={classes.data}>{getDestinationHeader(output)}</Link>\n                            ) : (\n                                <div className={classes.data}>{getDestinationHeader(output)}</div>\n                            )}\n                        </div>\n                        <div className={classes.script}>\n                            <div className={classes.header}>{getDestinationRawType(output)}:</div>\n                            <div className={classes.data}>{getDestinationRaw(output)}</div>\n                        </div>\n                    </div>\n                    {output.amount !== 0 || !isDataOutput(output) ? (\n                        <div className={classes.value}>\n                            <div className={classes.data}>\n                                {formatNumericalValue(output.amount, {\n                                    decimals: 8,\n                                    unit: coinInfo ? coinInfo.displaySymbol : undefined,\n                                    alwaysSingular: true,\n                                    decimalClass: classes.decimals,\n                                    unitClass: classes.unit,\n                                })}\n                            </div>\n                        </div>\n                    ) : null}\n                    {output.spentby ? (\n                        <div className={classes.spent}>\n                            {coinInfo ? (\n                                <Link\n                                    className={classes.data}\n                                    to={`/${coinInfo.ticker}/transactions/${output.spentby.txid}`}\n                                >\n                                    Spent ➔\n                                </Link>\n                            ) : (\n                                <div className={classes.data}>(spent)</div>\n                            )}\n                        </div>\n                    ) : !isDataOutput(output) ? (\n                        <div className={classes.unspent}>\n                            <div className={classes.data}>(Unspent)</div>\n                        </div>\n                    ) : null}\n                </div>\n            ))}\n        </div>\n    );\n};\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { CoinInfoContext } from 'context/CoinInfo.context';\n\nimport { ICoinbaseInfo, ISimplifiedTransactionInput, TransactionOutputType } from 'interfaces/ITransaction.interface';\n\nimport { formatNumericalValue } from 'utils/formatNumericalValue.util';\n\nimport classes from './TransactionInputs.module.scss';\n\ninterface IProps {\n    inputs: ISimplifiedTransactionInput[];\n    coinbase: ICoinbaseInfo | null;\n    coinbaseAmount?: number;\n}\n\nconst getInputSubtext = (inputType: TransactionOutputType): string | undefined => {\n    if (inputType === 'p2pk') {\n        return 'Using ancient signature-only redeemscript';\n    }\n    if (inputType === 'p2pkh') {\n        return 'Using normal transaction redeemscript & signature';\n    }\n    if (inputType === 'p2wpkh') {\n        return 'Using native SegWit transaction format for signature (subsidized)';\n    }\n    if (inputType === 'p2sh') {\n        return 'Using custom redeemscript to unlock input (possibly p2sh-wrapped SegWit)';\n    }\n    if (inputType === 'p2wsh') {\n        return 'Using custom redeemscript to unlock input in native SegWit transaction format';\n    }\n    return undefined;\n};\n\nexport const TransactionInputs: React.FC<IProps> = ({ inputs, coinbase, coinbaseAmount }) => {\n    const coinInfo = useContext(CoinInfoContext);\n    return (\n        <div className={classes.transactionInputs}>\n            {inputs.map((input, index) => (\n                <div key={index} className={classes.transactionInput}>\n                    <div className={classes.source}>\n                        <div className={classes.address}>\n                            {input.type !== 'raw' && input.type !== 'data' ? (\n                                <Link to={`/${coinInfo.ticker}/address/${input.address}`} className={classes.data}>{input.address}</Link>\n                            ) : (\n                                <div className={classes.data}>{input.address}</div>\n                            )}\n                            {getInputSubtext(input.type) !== undefined ? (\n                                <div className={classes.signatureType}>\n                                    <div className={classes.data}>{getInputSubtext(input.type)}</div>\n                                </div>\n                            ) : null}\n                        </div>\n                    </div>\n                    <div className={classes.inputsAmount}>\n                        {coinInfo && input.txid ? (\n                            <Link className={classes.data} to={`/${coinInfo.ticker}/transactions/${input.txid}`}>\n                                {'('}\n                                {formatNumericalValue(input.inputsAmount, {\n                                    unit: 'input',\n                                })}\n                                {')'}\n                            </Link>\n                        ) : (\n                            <div className={classes.data}>\n                                {'('}\n                                {formatNumericalValue(input.inputsAmount, {\n                                    unit: 'input',\n                                })}\n                                {')'}\n                            </div>\n                        )}\n                    </div>\n                    <div className={classes.value}>\n                        <div className={classes.data}>\n                            {formatNumericalValue(input.amount, {\n                                decimals: 8,\n                                unit: coinInfo ? coinInfo.displaySymbol : undefined,\n                                alwaysSingular: true,\n                                decimalClass: classes.decimals,\n                                unitClass: classes.unit,\n                            })}\n                        </div>\n                    </div>\n                </div>\n            ))}\n            {coinbase ? (\n                <div className={classes.transactionInput}>\n                    <div className={classes.source}>\n                        <div className={classes.address + ' ' + classes.textAddress}>\n                            <div className={classes.data}>Newly generated coins + transaction fees</div>\n                            <div className={classes.coinbasedata}>\n                                <div className={classes.header}>Data:</div>\n                                <div className={classes.data}>\n                                    {coinbase.data.map((segment, index) => \n                                        (<div className={classes.datasegment}>{segment}</div>)\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={classes.inputsAmount + ' ' + classes.coinbaseInput}>\n                        <div className={classes.data}>(coinbase input)</div>\n                    </div>\n                    {coinbaseAmount !== undefined ? (\n                        <div className={classes.value}>\n                            <div className={classes.data}>\n                                {formatNumericalValue(coinbaseAmount, {\n                                    decimals: 8,\n                                    unit: coinInfo ? coinInfo.displaySymbol : undefined,\n                                    alwaysSingular: true,\n                                    decimalClass: classes.decimals,\n                                    unitClass: classes.unit,\n                                })}\n                            </div>\n                        </div>\n                    ) : null}\n                </div>\n            ) : null}\n        </div>\n    );\n};\n","import React from 'react';\n\nimport { ITransaction, ISimplifiedTransactionInput, ITransactionOutput, ICoinbaseInfo } from 'interfaces/ITransaction.interface';\n\nimport { TransactionOutputs } from './TransactionOutputs/TransactionOutputs.component';\nimport { TransactionInputs } from './TransactionInputs/TransactionInputs.component';\n\nimport classes from './TransactionCoinMovement.module.scss';\n\ninterface IProps {\n    transaction: ITransaction;\n    simplifiedInputs: ISimplifiedTransactionInput[];\n    outputs: ITransactionOutput[];\n}\n\nexport const TransactionCoinMovement: React.FC<IProps> = ({ transaction, outputs, simplifiedInputs }) => {\n    return (\n        <div className={classes.coinMovement}>\n            <TransactionInputs\n                inputs={simplifiedInputs}\n                coinbase={transaction.coinbase ? transaction.coinbase as ICoinbaseInfo : null}\n                coinbaseAmount={transaction.totalvalue}\n            />\n            <TransactionOutputs outputs={Object.values(outputs)} />\n        </div>\n    );\n};\n","import React from 'react';\nimport useFetch from 'react-fetch-hook';\n\nimport {\n    IBlockTransactionWithBlockInfo,\n    ITransactionInput,\n    ISimplifiedTransactionInput,\n    ITransactionOutput\n} from 'interfaces/ITransaction.interface';\nimport { CoinTickerSymbol } from 'interfaces/ICoinInfo.interface';\n\nimport { getBaseUrl } from 'utils/getBaseUrl.util';\nimport { getCoinInfo, getAllCoins } from 'utils/getCoinInfo.util';\nimport { Redirect } from 'react-router';\nimport { TransactionMetaInfo } from './TransactionMetaInfo/TransactionMetaInfo.component';\nimport { TransactionCoinMovement } from './TransactionCoinMovement/TransactionCoinMovement.component';\n\nimport { CoinInfoContext } from 'context/CoinInfo.context';\n\nimport { Banner } from 'components/Banner/Banner.component';\nimport { Section } from 'components/Section/Section.component';\nimport { PageLoadAnimation } from 'components/PageLoadAnimation/PageLoadAnimation.component';\n\nimport classes from './TransactionView.module.scss';\n\ninterface IProps {\n    routeParams: { coin: CoinTickerSymbol; txid: string };\n}\n\nconst simplifyInputs = (inputs: ITransactionInput[]): ISimplifiedTransactionInput[] => {\n    var simplifiedDict: { [key: string]: ISimplifiedTransactionInput } = {};\n\n    inputs.forEach((input: ITransactionInput) => {\n        const key = input.address + '-' + input.type;\n\n        if (!(key in simplifiedDict)) {\n            simplifiedDict[key] = {\n                address: input.address,\n                type: input.type,\n                amount: input.amount,\n                inputsAmount: 1,\n                txid: input.spends.txid,\n            } as ISimplifiedTransactionInput;\n        } else {\n            simplifiedDict[key].amount += input.amount;\n            simplifiedDict[key].inputsAmount += 1;\n            simplifiedDict[key].txid = undefined;\n        }\n    });\n\n    return Object.values(simplifiedDict);\n};\n\nexport const TransactionView: React.FC<IProps> = ({ routeParams }) => {\n    const baseUrl = getBaseUrl(routeParams.coin);\n    const coinInfo = getCoinInfo(routeParams.coin);\n    const { isLoading, data: transaction, error } = useFetch<IBlockTransactionWithBlockInfo>(\n        `${baseUrl}/transactions/${routeParams.txid}/?expand=block,coinbase`\n    );\n    const { isLoading: inputsLoading, data: txInputs } = useFetch<ITransactionInput[]>(\n        `${baseUrl}/transactions/${routeParams.txid}/inputs/`\n    );\n    const { isLoading: outputsLoading, data: txOutputs } = useFetch<ITransactionOutput[]>(\n        `${baseUrl}/transactions/${routeParams.txid}/outputs/`\n    );\n    if (error != null) {\n        console.log(error);\n        return <Redirect to=\"/error404\" push={false} />;\n    }\n    return (\n        <CoinInfoContext.Provider value={coinInfo}>\n            <Banner coins={getAllCoins()} preferredCoin={coinInfo ? coinInfo.ticker : undefined} />\n            {!isLoading && transaction != null ? (\n                <div className={classes.transactionView}>\n                    <Section>\n                        <TransactionMetaInfo transaction={transaction} />\n                    </Section>\n                    <Section header=\"Coins moved\">\n                        { !inputsLoading && !outputsLoading && txInputs != null && txOutputs != null ? (\n                            <TransactionCoinMovement\n                                transaction={transaction}\n                                outputs={txOutputs}\n                                simplifiedInputs={simplifyInputs(Object.values(txInputs))}\n                            />\n                        ) : (\n                            <PageLoadAnimation />\n                        )}\n                    </Section>\n                </div>\n            ) : (\n                <PageLoadAnimation />\n            )}\n        </CoinInfoContext.Provider>\n    );\n};\n","import { createContext } from 'react';\n\nimport { ICoinInfo } from 'interfaces/ICoinInfo.interface';\n\nexport const CoinInfoContext = createContext<ICoinInfo>(null!);\n","import { CoinTickerSymbol } from 'interfaces/ICoinInfo.interface';\n\nexport const getBaseUrl = (ticker: CoinTickerSymbol) => `https://api.freshgrlc.net/blockchain/${ticker}`;\n","import { CoinTickerSymbol, ICoinInfo } from 'interfaces/ICoinInfo.interface';\n\nconst Coins: ICoinInfo[] = [\n    {\n        ticker: 'grlc',\n        name: 'garlicoin',\n        displayName: 'Garlicoin',\n        displaySymbol: 'GRLC',\n        blockTime: 40,\n        blockReward: 25,\n        logo: 'garlicoin.svg',\n    },\n    {\n        ticker: 'tux',\n        name: 'tuxcoin',\n        displayName: 'Tuxcoin',\n        displaySymbol: 'TUX',\n        blockTime: 60,\n        blockReward: 33.5,\n        logo: 'tuxcoin.svg',\n    },\n    {\n        ticker: 'tgrlc',\n        name: 'garlicoin-testnet',\n        displayName: 'Garlicoin testnet',\n        displaySymbol: 'tGRLC',\n        blockTime: 40,\n        blockReward: 50,\n        logo: 'garlicoin.svg',\n    },\n];\n\nexport const getCoinInfo = (ticker: CoinTickerSymbol): ICoinInfo => {\n    return Coins.filter((coin) => coin.ticker === ticker)[0];\n};\n\nexport const getAllCoins = () => Coins;\n","import React from 'react';\n\nimport classes from './Section.module.scss';\n\ninterface IProps {\n    children?: any;\n    header?: string;\n}\n\nexport const Section: React.FC<IProps> = ({ children, header }) => {\n    return (\n        <div className={classes.pagesection}>\n            {header ? <h2 className={classes.sectionheader}>{header}</h2> : null}\n            {children}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagesection\":\"Section_pagesection__NIoLc\",\"sectionheader\":\"Section_sectionheader__1msZN\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport loading from 'assets/loading.gif';\n\nimport { ICell, ICellStyle } from 'interfaces/ICell.interface';\n\nimport { formatNumericalValue } from 'utils/formatNumericalValue.util';\n\nimport classes from './Cell.module.scss';\n\nexport const Cell: React.FC<ICell> = ({\n    label,\n    largelabel,\n    data,\n    link,\n    externalLink,\n    unit,\n    notMono,\n    decimals,\n    maxDecimals,\n    alwaysSingular,\n    cellStyle,\n}) => {\n    const wrapInLink = (contents: JSX.Element, cellStyle?: ICellStyle) => {\n        let className = classes.link + (cellStyle && cellStyle.linkColor !== 'normal' ? ' ' + classes.accentuatedLink : '');\n        return link ? (\n            externalLink ? (\n                <a\n                    className={className}\n                    href={link}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={processInnerCellStyle(cellStyle)}\n                >\n                    {contents}\n                </a>\n            ) : (\n                <Link className={className} to={link} style={processInnerCellStyle(cellStyle)}>\n                    {contents}\n                </Link>\n            )\n        ) : (\n            <div style={processInnerCellStyle(cellStyle)}>{contents}</div>\n        );\n    };\n\n    const processCellStyle = (innerCell: boolean, cellStyle?: ICellStyle): React.CSSProperties | undefined => {\n        var style: React.CSSProperties = {};\n\n        if (!cellStyle) {\n            return undefined;\n        }\n\n        if (cellStyle.sunken || cellStyle.sunkenData) {\n            if (innerCell) {\n                style.backgroundColor = '#34322e';\n                style.padding = '4px';\n                style.borderRadius = '10px';\n                style.width = '90%';\n            } else {\n                style.height = '28px';\n            }\n        }\n\n        if (innerCell && cellStyle.align) {\n            if (cellStyle.align === 'left') {\n                style.marginRight = 'auto';\n            } else if (cellStyle.align === 'right') {\n                style.marginLeft = 'auto';\n            }\n        }\n\n        if (innerCell && cellStyle.textColor) {\n            style.color = cellStyle.textColor;\n        }\n\n        if (!innerCell && cellStyle.size) {\n            style.width = cellStyle.size;\n        }\n\n        if (!innerCell && cellStyle.fontSize) {\n            style.fontSize = {\n                normal: undefined,\n                smaller: '90%',\n                small: '85%',\n            }[cellStyle.fontSize];\n        }\n\n        return style;\n    };\n\n    const processOuterCellStyle = (cellStyle?: ICellStyle): React.CSSProperties | undefined =>\n        processCellStyle(false, cellStyle);\n    const processInnerCellStyle = (cellStyle?: ICellStyle): React.CSSProperties | undefined =>\n        processCellStyle(true, cellStyle);\n\n    const hasData = data !== null && data !== undefined;\n    const formattedData = hasData\n        ? formatNumericalValue(data as (string | number), {\n              decimals,\n              maxDecimals,\n              unit,\n              alwaysSingular,\n              decimalClass: classes.decimals,\n              unitClass: classes.unit\n          })\n        : undefined;\n\n    return (\n        <div className={`${classes.cell} ${cellStyle && cellStyle.color ? classes[cellStyle.color + 'Cell'] : ''}`}>\n            {label ? <h4 className={classes.label + (largelabel ? ' ' + classes.largelabel : '') + (cellStyle && cellStyle.sunken ? ' ' + classes.sunkenLabel : '')}>{label}</h4> : null}\n            <div className={classes.info} style={processOuterCellStyle(cellStyle)}>\n                {hasData ? (\n                    wrapInLink(<div\n                        className={[\n                            notMono ? undefined : classes.mono,\n                            cellStyle && cellStyle.dataNotImportant ? classes.dimmedValue : undefined\n                        ].filter(e => e !== undefined).join(' ')}\n                    >{formattedData}</div>, cellStyle)\n                ) : (\n                    wrapInLink(<img className={classes.loading} src={loading} alt=\"Loading\" />, cellStyle)\n                )}\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"FreshGRLCBanner_banner__GV84b\",\"subdomain\":\"FreshGRLCBanner_subdomain__PJy6_\",\"subtext\":\"FreshGRLCBanner_subtext___Qo5E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"coinSelector\":\"CoinSelector_coinSelector__2igoQ\",\"separator\":\"CoinSelector_separator__3R6Lt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar\":\"SearchBar_searchbar__SqBc-\"};","import React from 'react';\n\nimport classes from './FreshGRLCBanner.module.scss';\n\n\ninterface IProps {\n    title?: string,\n    subdomain?: string,\n    subtitle?: string,\n    subtext?: string | JSX.Element\n}\n\nexport const FreshGRLCBanner: React.FC<IProps> = function({ title, subdomain, subtitle, subtext }) {\n    title = title ? title : 'FreshGRLC.NET';\n    return (\n        <div className={classes.banner}>\n            <h1>{ subdomain ? (<span className={classes.subdomain}>{subdomain}.</span>) : ''}{title}</h1>\n            { subtitle ? (<h2>{subtitle}</h2>) : undefined}\n            { subtext ? (<div className={classes.subtext}>{subtext}</div>) : undefined}\n        </div>\n    );\n};\n","import React from 'react';\n\nimport { ICoinInfo, CoinTickerSymbol } from 'interfaces/ICoinInfo.interface';\n\nimport classes from './CoinSelector.module.scss';\n\ninterface ICombinedCoins {\n    name: string;\n    coins: CoinTickerSymbol[];\n};\n\nexport type SingleOrCombinedCoin = ICoinInfo | ICombinedCoins;\n\ninterface IProps {\n    coins: SingleOrCombinedCoin[];\n}\n\nconst makeCoinsUrl = (coin: ICoinInfo | ICombinedCoins): string => {\n    const combinedCoins = coin as ICombinedCoins;\n    if (combinedCoins !== undefined && combinedCoins.coins !== undefined) {\n        const combinedCoins = coin as ICombinedCoins;\n        return combinedCoins.coins.join('+');\n    }\n    return (coin as ICoinInfo).ticker;\n};\n\nexport const CoinSelector: React.FC<IProps> = function({ coins }) {\n    return (\n        <div className={classes.coinSelector}>\n            Show information for:\n            {\n                coins.map((coin, index) => (\n                    <React.Fragment key={index}>\n                        {index ? (<span className={classes.separator}>{'\\u25CF'}</span>) : ''}\n                        <a className={classes.selectableCoin} href={`/${makeCoinsUrl(coin)}/home/`}>{coin.name}</a>\n                    </React.Fragment>\n                ))\n            }\n        </div>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Form } from 'semantic-ui-react';\n\nimport { IAddressInfo } from 'interfaces/IAddressInfo.interface';\nimport { IBlock } from 'interfaces/IBlock.interface';\nimport { IBlockTransaction } from 'interfaces/ITransaction.interface';\n\nimport { ICoinInfo, CoinTickerSymbol } from 'interfaces/ICoinInfo.interface';\n\nimport { getBaseUrl } from 'utils/getBaseUrl.util';\n\nimport classes from './SearchBar.module.scss';\nimport 'semantic-ui-css/semantic.min.css';\n\ntype ISearchResult = IBlock | IBlockTransaction | IAddressInfo | null;\n\ninterface ISearchResultWithContext {\n    result: ISearchResult;\n    network: CoinTickerSymbol;\n}\n\ninterface IProps {\n    coins: ICoinInfo[];\n    preferredCoin?: CoinTickerSymbol;\n}\n\nexport const SearchBar: React.FC<IProps> = function({ coins, preferredCoin }) {\n    const [searchFieldValue, updateSearchField] = useState<string>('');\n    const [searchObject, setSearchObject] = useState<string>('');\n    const [isLoading, setLoading] = useState<boolean>(false);\n    const [isError, setError] = useState<boolean>(false);\n    const [searchResults, setSearchResults] = useState<ISearchResultWithContext[] | undefined>(undefined);\n    const [selectedObject, setSelectedObject] = useState<ISearchResultWithContext | undefined>(undefined);\n    const [redirectUrl, redirectTo] = useState<string | undefined>(undefined);\n\n    useEffect(() => {\n        setError(false);\n    }, [searchFieldValue]);\n\n    useEffect(() => {\n        if (searchObject === '') {\n            setLoading(false);\n            return;\n        }\n\n        setLoading(true);\n        Promise.all(\n            coins.map(\n                async (coin) =>\n                    (await fetch(`${getBaseUrl(coin.ticker)}/search/${searchObject}`)).json() as Promise<ISearchResult>\n            )\n        )\n            .then((results) =>\n                results\n                    .map((result, index) => {\n                        return {\n                            result: result,\n                            network: coins[index].ticker,\n                        };\n                    })\n                    .filter((result) => result.result !== null)\n            )\n            .then(setSearchResults);\n    }, [coins, searchObject]);\n\n    useEffect(() => {\n        setLoading(false);\n        if (searchResults === undefined) return;\n\n        if (searchResults.length === 0) {\n            setError(true);\n            return;\n        }\n\n        if (searchResults.length > 1 && preferredCoin !== undefined) {\n            const filtered = searchResults.filter((result) => result.network === preferredCoin);\n            if (filtered.length > 0) {\n                setSelectedObject(filtered[0]);\n                return;\n            }\n        }\n\n        setSelectedObject(searchResults[0]);\n    }, [searchResults, preferredCoin]);\n\n    useEffect(() => {\n        if (selectedObject === undefined || selectedObject.result === null) return;\n\n        if (selectedObject.result.hasOwnProperty('txid')) {\n            const transaction = selectedObject.result as IBlockTransaction;\n            redirectTo(`/${selectedObject.network}/transactions/${transaction.txid}`);\n        } else if (selectedObject.result.hasOwnProperty('hash')) {\n            const block = selectedObject.result as IBlock;\n            redirectTo(`/${selectedObject.network}/blocks/${block.hash}`);\n        } else {\n            const address = selectedObject.result as IAddressInfo;\n            redirectTo(`/${selectedObject.network}/address/${address.address}`);\n        }\n    }, [selectedObject]);\n\n    /* FIXME */\n    return redirectUrl === undefined ? (\n        <Form className={classes.searchbar} onSubmit={() => setSearchObject(searchFieldValue.trim())}>\n            <Form.Input\n                size=\"large\"\n                placeholder=\"Search for address, transaction or block...\"\n                loading={isLoading}\n                error={isError}\n                value={searchFieldValue}\n                onChange={(e) => updateSearchField(e.target.value)}\n            />\n        </Form>\n    ) : (\n        <Form className={classes.searchbar} onSubmit={() => setSearchObject(searchFieldValue.trim())}>\n            <Redirect push to={redirectUrl} />\n            <Form.Input\n                size=\"large\"\n                placeholder=\"Search for address, transaction or block...\"\n                loading={isLoading}\n                error={isError}\n                value={searchFieldValue}\n                onChange={(e) => updateSearchField(e.target.value)}\n            />\n        </Form>\n    );\n};\n","import React from 'react';\n\nimport { ICoinInfo, CoinTickerSymbol } from 'interfaces/ICoinInfo.interface';\n\nimport { FreshGRLCBanner } from './FreshGRLCBanner/FreshGRLCBanner.component';\nimport { CoinSelector, SingleOrCombinedCoin } from './CoinSelector/CoinSelector.component';\nimport { SearchBar } from './SearchBar/SearchBar.component';\n\nimport { getCoinInfo } from 'utils/getCoinInfo.util';\n\n\ninterface IProps {\n    coins: ICoinInfo[];\n    preferredCoin?: CoinTickerSymbol;\n}\n\nexport const Banner: React.FC<IProps> = function({ coins, preferredCoin }) {\n    const selectableCoins: SingleOrCombinedCoin[] = [\n        getCoinInfo('grlc'),\n        getCoinInfo('tux'),\n        { name: '(both)', coins: ['grlc', 'tux'] },\n        getCoinInfo('tgrlc')\n    ];\n    return (\n        <FreshGRLCBanner subdomain=\"explorer\" subtitle=\"Multi-Blockchain Explorer\" subtext={(\n            <>\n                <CoinSelector coins={selectableCoins} />\n                <SearchBar coins={coins} preferredCoin={preferredCoin} />\n            </>\n        )}/>\n    );\n};\n","import React from 'react';\n\nexport const rounded = (number: number, decimals?: number, maxDecimals: number = 8): [number | string, string | undefined] => {\n    const negative = number < 0;\n    const absolute = Math.abs(number.valueOf());\n    const integer = Math.floor(absolute);\n    const decimalpart = absolute - integer;\n    const roundTo = decimals !== undefined ? decimals : decimalpart.toString().length > 2 + maxDecimals ? maxDecimals : undefined;\n    const roundedDecimals = (\n        roundTo !== undefined ? decimalpart.toFixed(roundTo) : decimalpart.toString()\n    ).substring(2, 2 + maxDecimals);\n\n    return [\n        negative ? integer === 0 ? '-0' : -integer : integer,\n        roundedDecimals !== '' ? (\n            decimals !== undefined ? roundedDecimals : roundedDecimals.replace(/0+$/, '')\n        ) : undefined\n    ];\n};\n\nexport const formatDecimal = (integer: number | string, decimalClass?: string, roundedDecimals?: string): JSX.Element => {\n    return (\n        <>\n            {integer}\n            {roundedDecimals ? <span className={decimalClass}>.{roundedDecimals}</span> : null}\n        </>\n    );\n};\n\ninterface INumericalValueOptions {\n    decimals?: number;\n    maxDecimals?: number;\n    unit?: string;\n    alwaysSingular?: boolean;\n    decimalClass?: string;\n    unitClass?: string;\n    dimValue?: boolean;\n}\n\nexport const formatNumericalValue = (value: number | string, options: INumericalValueOptions) => {\n    const { decimals, maxDecimals, unit, alwaysSingular, decimalClass, unitClass } = options;\n\n    let roundedData: [number | string, string | undefined] | undefined;\n    let formattedData: JSX.Element | string | undefined;\n    let isExactlyOne: boolean = false;\n\n    if (typeof value === 'number') {\n        roundedData = rounded(value, decimals, maxDecimals);\n        formattedData = formatDecimal(roundedData[0], decimalClass, roundedData[1]);\n    } else {\n        roundedData = rounded(Number(value), decimals, maxDecimals);\n        formattedData = value;\n    }\n    isExactlyOne = roundedData[0] in [-1, 1];\n\n    return (\n        <>\n            {formattedData}\n            {unit ? (\n                <div className={unitClass}>\n                    {' '}\n                    {unit}\n                    {isExactlyOne || alwaysSingular ? '' : 's'}\n                </div>\n            ) : null}\n        </>\n    );\n};\n","import React from 'react';\n\nimport classes from './PageLoadAnimation.module.scss';\n\nimport loading from 'assets/loading_large.svg';\n\nexport const PageLoadAnimation: React.FC = () => {\n    return (\n        <div className={classes.wrapper}>\n            <div className={classes.pageLoad}>\n                <div className={classes.inner}>\n                    <img src={loading} alt=\"\" />\n                    <h3>Loading...</h3>\n                </div>\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PageLoadAnimation_wrapper__3xAcH\",\"pageLoad\":\"PageLoadAnimation_pageLoad__3wwZ4\",\"inner\":\"PageLoadAnimation_inner__1QFe0\"};","module.exports = __webpack_public_path__ + \"static/media/loading_large.346688c2.svg\";","export const padNumber = (num: number): string => {\n    return num.toString().padStart(2, '0');\n};\n","import { padNumber } from './padNumber.util';\n\nexport const formatTime = (timestamp: number | null | undefined, alwaysIncludeDate?: boolean): string => {\n    if (timestamp === null || timestamp === undefined) {\n        return 'Unknown';\n    }\n\n    const includeDate: boolean = alwaysIncludeDate || Date.now() / 1000 - timestamp > 86400;\n    const date = new Date(timestamp * 1000);\n    const zone = new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];\n\n    /* FIXME: Detect browsers for people that don't get how calenders work */\n    return (\n        (includeDate\n            ? `${padNumber(date.getDate())}-${padNumber(date.getMonth() + 1)}-${padNumber(date.getFullYear())} `\n            : '') +\n        `${padNumber(date.getHours())}:${padNumber(date.getMinutes())}:${padNumber(date.getSeconds())} ${zone}`\n    );\n};\n\nexport const formatTimeDiff = (timestamp1?: number, timestamp2?: number, useSeconds?: boolean): [number | string, string | undefined] => {\n    if (timestamp1 === undefined || timestamp1 === null || timestamp2 === undefined) {\n        return ['Unknown', undefined];\n    }\n\n    const timeDiff = timestamp2 - timestamp1;\n\n    if (timeDiff < 60) {\n        return useSeconds ? [timeDiff, 'second'] : ['<1', 'minute'];\n    }\n    if (timeDiff < 3600) {\n        return [Math.round(timeDiff / 60), 'minute'];\n    }\n    if (timeDiff < 86400) {\n        return [Math.round(timeDiff / 3600), 'hour'];\n    }\n    if (timeDiff < 604800) {\n        return [Math.round(timeDiff / 86400), 'day'];\n    }\n    if (timeDiff < 2592000) {\n        return [Math.round(timeDiff / 604800), 'week'];\n    }\n    if (timeDiff < 220752000) {\n        return [Math.round(timeDiff / 2592000), 'month'];\n    }\n    return [Math.round(timeDiff / 220752000), 'year'];\n};\n\nexport const formatTimeDiffToString = (timestamp1?: number, timestamp2?: number, useSeconds?: boolean): string => {\n    const unformatted = formatTimeDiff(timestamp1, timestamp2, useSeconds);\n    return unformatted[0].toString() + ' ' + unformatted[1] + (unformatted[0] !== 1 ? 's' : '');\n}\n\nexport const formatTimeSince = (timestamp?: number): [number | string, string | undefined] => {\n    return formatTimeDiff(timestamp, Date.now() / 1000);\n};\n","module.exports = __webpack_public_path__ + \"static/media/loading.e7224f88.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__2Y63x\",\"label\":\"Cell_label__3ePW_\",\"sunkenLabel\":\"Cell_sunkenLabel__3CcxM\",\"largelabel\":\"Cell_largelabel__24-9K\",\"info\":\"Cell_info__1BKSq\",\"mono\":\"Cell_mono__3WhQB\",\"dimmedValue\":\"Cell_dimmedValue__1W1mr\",\"decimals\":\"Cell_decimals__1fWGM\",\"unit\":\"Cell_unit__31Wzf\",\"loading\":\"Cell_loading__3bY5H\",\"link\":\"Cell_link__oj9kk\",\"accentuatedLink\":\"Cell_accentuatedLink__4FSBT\",\"normalCell\":\"Cell_normalCell__2ayJT\",\"lighterCell\":\"Cell_lighterCell__3JIpK\",\"lightCell\":\"Cell_lightCell__2_HD7\",\"darkerCell\":\"Cell_darkerCell__3UGjH\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Cell } from '../Cell/Cell.component';\n\nimport { IRow } from 'interfaces/IRow.interface';\n\nimport classes from './Row.module.scss';\n\nexport const Row: React.FC<IRow> = ({ label, labelWidth, labelSubText, labelSubTextLink, cells, wide, extrawide }) => {\n    const getLabelStyle = (width?: string): React.CSSProperties => {\n        var style: React.CSSProperties = {};\n\n        if (width) {\n            style.width = width;\n        }\n\n        return style;\n    };\n\n    var hasCellLabels: boolean = false;\n\n    cells.forEach((cell) => {\n        if (cell.label !== undefined) {\n            hasCellLabels = true;\n        }\n    });\n\n    return (\n        <div\n            className={`\n        ${classes.row} ${extrawide ? classes.verticalExtraPaddedRow : hasCellLabels || wide ? classes.verticalPaddedRow : ''}`}\n        >\n            <h3\n                className={`${classes.label} ${hasCellLabels ? classes.verticalPaddedLabel : ''} ${\n                    wide ? classes.wideRowLabel : ''\n                }`}\n                style={getLabelStyle(labelWidth)}\n            >\n                {label}\n                {labelSubText ? (\n                    <>\n                        <br />\n                        <span className={classes.labelSubText}>\n                        {labelSubTextLink ? (\n                            <Link to={labelSubTextLink}>{labelSubText}</Link>\n                        ) : labelSubText}\n                        </span>\n                    </>\n                ) : undefined}\n            </h3>\n            {cells.map((cell, index) => (\n                <Cell key={index} {...cell} />\n            ))}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Row_row__2Lsla\",\"label\":\"Row_label__9CPRA\",\"labelSubText\":\"Row_labelSubText__2Zx8n\",\"wideRowLabel\":\"Row_wideRowLabel__1zVT8\",\"verticalPaddedLabel\":\"Row_verticalPaddedLabel__3Mktc\",\"verticalPaddedRow\":\"Row_verticalPaddedRow__Lq_vu\",\"verticalExtraPaddedRow\":\"Row_verticalExtraPaddedRow__2w870\"};"],"sourceRoot":""}